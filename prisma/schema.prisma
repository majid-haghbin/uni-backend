// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  ID Int @default(autoincrement()) @id
  name String
  family String
  fatherName String?
  mobile String @unique
  email String @unique
  role Role @default(student)
  password String @default("")

  adminID       Int?        @unique
  admin         Admin?     @relation(fields: [adminID], references: [id])

  studentID       Int?        @unique
  student         Student?     @relation(fields: [studentID], references: [id])

  professorID       Int?         @unique
  professor         Professor?     @relation(fields: [professorID], references: [id])
}

model Admin {
  id        Int       @default(autoincrement()) @id

  user User?
}

model Student {
  id        Int       @default(autoincrement()) @id
  birthDate   String
  code        String

  user User?

  major     Major @relation(fields: [majorID], references: [id])
  majorID   Int

  pickedLessons PickedLesson[]
  attempts  ExamAttempt[]
}

model Professor {
  id        Int       @default(autoincrement()) @id
  // تاریخ شروع به کار
  dateOfEmployment String
  
  user User?

  lessons   Lesson[]
}

model Major {
  id            Int       @default(autoincrement()) @id
  name          String
  // تاریخ ایجاد
  created       BigInt
  // تاریخ آخرین آپدیت
  updated       BigInt
  // حداقل تعداد واحد این رشته تحصیلی
  minimumUnits  Int

  students  Student[]
  lessons   Lesson[]
}

model Lesson {
  id            Int       @default(autoincrement()) @id
  name          String
  unit          Int

  major         Major     @relation(fields: [majorID], references: [id])
  majorID       Int

  professor     Professor @relation(fields: [professorID], references: [id])
  professorID   Int

  pickedLessons PickedLesson[]
  exams         Exam[]
}

model PickedLesson {
  @@id([lessonID, studentID])

  lessonID    Int
  lesson      Lesson    @relation(fields: [lessonID], references: [id])

  studentID   Int
  student     Student   @relation(fields: [studentID], references: [id])
}

model Exam {
  id        Int       @default(autoincrement()) @id
  title      String
  created   String
  updated   String
  description String?

  questions Question[]

  lessonID  Int
  lesson    Lesson    @relation(fields: [lessonID], references: [id])

  attempts  ExamAttempt[]
}

model Question {
  id Int @id @default(autoincrement())
  text  String
  isMultiChoice Boolean

  examID  Int
  exam Exam @relation(fields: [examID], references: [id])

  choices Choice[]
}

model Choice {
  id  Int @id @default(autoincrement())
  text  String

  questionID  Int
  question Question @relation(fields: [questionID], references: [id])
}

model ExamAttempt {
  @@id([examID, studentID])

  examID    Int
  exam      Exam    @relation(fields: [examID], references: [id])

  studentID   Int
  student     Student   @relation(fields: [studentID], references: [id])
}

enum Role {
  superAdmin
  admin
  student
  professor
}

